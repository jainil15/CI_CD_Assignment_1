name: "Nginx Deployment"
on:
  push:
    branches: ["master" ]
  pull_request:
    branches: ["master"]

jobs:
  terrafom:
    runs-on: ubuntu-latest

    steps:
      - name: Docker Checkout
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nginx-assignment .
          docker push ${{ secrets.DOCKER_USERNAME }}/nginx-assignment

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get MY IP
        id: get_my_ip
        run: echo "::set-output name=my_ip::$(curl https://ipv4.icanhazip.com/)"

      - name: Terraform Init
        run: terraform init
      # -backend-config="bucket=${{ secrets.S3_BACKEND_NAME }}" -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="encrypt=true" -backend-config="profile=${{ secrets.BACKEND_PROFILE }}" -backend-config="role_arn=${{ secrets.ROLE_ARN }}" -backend-config="dynamodb_table=${{ secrets.BACKEND_DYNAMODB }}" -backend-config="key=${{ secrets.BACKEND_KEY }}"

      - name: Terraform Plan
        env:
          TF_VAR_private_key: ${{ secrets.AWS_KEYPAIR }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_my_ip: ${{ steps.get_my_ip.outputs.my_ip }}

        run: terraform plan -no-color

      - name: Terraform Apply
        env:
          TF_VAR_private_key: ${{ secrets.AWS_KEYPAIR }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_my_ip: ${{ steps.get_my_ip.outputs.my_ip }}
        run: terraform apply -auto-approve

      - name: Terraform output
        id: terraform_output
        run: |
          echo "::set-output name=public_instance_ip::$(terraform output public_instance_ip | sed -e 's/^"//' -e 's/"$//')"

      - name: Wait for Port Open
        run: |
          while ! nc -zv ${{ steps.terraform_output.outputs.public_instance_ip }} 22; do
            echo "Waiting for port 22 on host ${{ steps.terraform_output.outputs.public_instance_ip }} to be open..."
            sleep 10
          done
          echo "Port 22 on host ${{ steps.terraform_output.outputs.public_instance_ip }} is now open."

      - name: SSH to AWS Instance and Pull Image
        uses: appleboy/ssh-action@master
        with:
          host: "${{ steps.terraform_output.outputs.public_instance_ip }}"
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_KEYPAIR }}
          script: |
            
            while ! dpkg-query -W -f='${Status}' docker 2>/dev/null | grep -q "install ok installed"; then
              echo "Docker not installed please wait..."  
              sleep 10
            done
            sudo docker stop nginx_container
            sudo docker rm nginx_container
            sudo docker run -d -p 80:80 --restart unless-stopped --name nginx_container ${{ secrets.DOCKER_USERNAME }}/nginx-assignment
